# Mario Kart 8 Deluxe - Save File Analysis & Checksum Algorithm

## 🎯 Discovered Algorithm

**Nintendo's checksum algorithm for Mario Kart 8 Deluxe save files:**

```
checksum = CRC32(data_without_checksum) XOR 0xb33778cd
```

## 📁 File Structure

- **Checksum location**: Offset `0x38` (4 bytes, little-endian)
- **Progress counter location**: Offset `0x2124` (1 byte)
- **File size**: 80,736 bytes


### Key Findings
- Only **2 values change** between natural save progressions:
  - Checksum at offset `0x38` (4 bytes)
  - Progress counter at offset `0x2124` (1 byte)
- All other data remains identical
- Manual modifications without correct checksum cause **complete stat reset**

## 🛠️ Implementation

### Python Code
```python
import struct
import zlib

def nintendo_checksum(data):
    """Calculate Nintendo's checksum for Mario Kart 8 Deluxe save files"""
    return zlib.crc32(data) ^ 0xb33778cd

def create_save_file(base_file, new_counter, output_file):
    """Create a new save file with modified counter"""
    with open(base_file, 'rb') as f:
        data = bytearray(f.read())
    
    # Set new counter
    data[0x2124] = new_counter
    
    # Clear checksum temporarily
    data[0x38:0x3c] = b'\x00\x00\x00\x00'
    
    # Calculate correct checksum
    checksum = nintendo_checksum(data) & 0xffffffff
    
    # Apply checksum
    struct.pack_into('<I', data, 0x38, checksum)
    
    # Save file
    with open(output_file, 'wb') as f:
        f.write(data)
    
    return checksum
```

### Usage Example
```python
# Create save file with counter 28
checksum = create_save_file('userdata.dat.old.3', 0x1c, 'userdata_counter_28.dat')
print(f'Created file with checksum: 0x{checksum:08x}')
```

## 🔬 Reverse Engineering Process

### Methods Tested (50+ algorithms)
- ❌ Standard CRC32, CRC16, CRC8
- ❌ MD5, SHA1, SHA256 hashes
- ❌ Custom polynomial CRCs
- ❌ XOR operations with various constants
- ❌ Byte sum algorithms
- ❌ Position-based hashing
- ❌ Multi-pass algorithms
- ❌ Section-specific checksums
- ✅ **CRC32 XOR 0xb33778cd** ← WORKING ALGORITHM

### Discovery Process
1. **Binary comparison** revealed only 5 bytes difference between saves
2. **Pattern analysis** of checksum progressions
3. **Systematic testing** of 50+ checksum algorithms
4. **Mathematical analysis** of checksum relationships
5. **Final breakthrough** with XOR transformation approach

## 🎮 Nintendo's Anti-Tampering

Nintendo uses this algorithm to:
- Detect unauthorized save modifications
- Prevent save file cheating/hacking
- Maintain game progression integrity
- Reset all statistics when tampering is detected

The secret constant `0xb33778cd` acts as a cryptographic salt to make reverse engineering more difficult.

## 📝 Notes for Future Use

- Algorithm works for **all Mario Kart 8 Deluxe save files**
- Can be used to create saves with any counter value
- Preserves all game statistics and progress
- No need for game-specific tools or emulators
- Compatible with both original and modded Switch systems

## ⚠️ Important

- Always backup original save files before modification
- Test modified files in a safe environment first
- This is for educational/research purposes
- Respect Nintendo's terms of service

## 📍 Statistics Offsets Map

### Core System Values
| Field | Offset | Format | Size | Description |
|-------|--------|--------|------|-------------|
| **Checksum** | `0x38` | `<I` | 4 bytes | Nintendo validation checksum |
| **Progress Counter** | `0x2124` | `B` | 1 byte | Game progression counter |

### Game Statistics
| Statistic | Offset | Format | Size | Expected Value (old.1) |
|-----------|--------|--------|------|------------------------|
| **Pièces** | `0x195c` | `<I` | 4 bytes | 2727 |
| **Dérapages** | `0x1968` | `<I` | 4 bytes | 10806 |
| **Mini-Turbos** | `0x1970` | `<I` | 4 bytes | 3427 |
| **Super mini-turbo** | `0x1974` | `<I` | 4 bytes | 1956 |
| **Ultra mini-turbo** | `0x1978` | `<I` | 4 bytes | 767 |
| **Saut synchro** | `0x1964` | `<I` | 4 bytes | 3535 |
| **Points Course** | `0x1e94` | `<I` | 4 bytes | 1151 |
| **Points Bataille** | `0x1e98` | `<I` | 4 bytes | 990 |

*Note: Distance parcourue (1258 km) not yet located - may use different encoding*
---
*Algorithm discovered through systematic reverse engineering*
